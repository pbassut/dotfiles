set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim


call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'Shougo/deoplete.nvim'
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'ternjs/tern_for_vim'
"Bundle 'lepture/vim-jinja'

Plugin 'sjl/badwolf'
"Plugin 'digitaltoad/vim-pug'

Plugin 'bling/vim-airline'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'xolox/vim-misc'
Plugin 'scrooloose/nerdtree'
Plugin 'Raimondi/delimitMate'
"Plugin 'mileszs/ack.vim'
Plugin 'majutsushi/tagbar'
Plugin 'nvie/vim-flake8'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-fugitive'
"Plugin 'craigemery/vim-autotag'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'rking/ag.vim'
"Plugin 'sjl/splice.vim'

Plugin 'mxw/vim-jsx'
Plugin 'pangloss/vim-javascript'
"Plugin 'toyamarinyon/vim-swift'
"Plugin 'cakebaker/scss-syntax.vim'
"Plugin 'leafgarland/typescript-vim'

"Plugin 'wakatime/vim-wakatime'

"Plugin 'kchmck/vim-coffee-script'
Plugin 'terryma/vim-multiple-cursors'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
call deoplete#enable()

let g:airline#extensions#branch#enabled = 1

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set shiftwidth=4
set tabstop=4
set softtabstop=4
set autoindent
set copyindent
set expandtab

set ignorecase
set smartcase

set laststatus=2

let g:airline#extensions#tabline#enabled = 1

set rnu

set wrap

" Inserting pdb breakpoint 
map <silent> <leader>b oimport pdb; pdb.set_trace()<esc>
map <silent> <leader>B Oimport pdb; pdb.set_trace()<esc>

" Leader = ,
let mapleader = ","
" }}}
" ##### General mappings  {{{
" ##### Tabs {{{
nnoremap <leader>c :tabclose<CR>
nnoremap <leader>n :tabnext<CR>
nnoremap <leader>p :tabprevious<CR>
" }}}
" ##### Fzf {{{
noremap <silent> <leader>f :Files<CR>
noremap <silent> <leader>g :GFiles<CR>
noremap <silent> <leader>O :Tags<CR>
noremap <silent> <leader>t :BTags<CR>
noremap <silent> <leader>b :Buffers<CR>
noremap <silent> <leader>? :History<CR>

noremap <silent> <leader>gl :Commits<CR>
noremap <silent> <leader>ga :BCommits<CR>

" }}}

" Go to start of line with H and to the end with $
noremap H ^
noremap L $

" Easy buffer navigation
nnoremap gn :bn<CR>
nnoremap gp :bp<CR>
nnoremap gd :bw<CR>

nmap <S-Enter> O<Esc>

colorscheme badwolf

set relativenumber

" tell it to use an undo file
set undofile
set undodir=~/.vimundo/

" Supress warning when moving out from unsaved buffers
set hidden

" NERDTree Maps
map <C-n> :NERDTreeToggle<CR>
map <C-j> :NERDTreeFind<CR>

let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-l>'
let g:multi_cursor_prev_key='<C-h>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Commenting out easily
map <D-/> <leader>ci

" Supress warning when reloading file
setl autoread

let g:jsx_ext_required = 0

" Map for tagbar
nmap <F8> :TagbarToggle<CR>

" Ctags mapping
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
syntax enable

let g:Tlist_Ctags_Cmd='/usr/local/bin/ctags'

if filereadable('.vimrclocal')
  so .vimrclocal
endif
